{"version":3,"sources":["BottomTabView.tsx"],"names":["React","View","StyleSheet","NavigationHelpersContext","useTheme","ResourceSavingScene","SceneContent","isFocused","children","colors","styles","content","backgroundColor","background","BottomTabView","Component","loaded","props","state","index","tabBar","tabBarOptions","navigation","descriptors","getDerivedStateFromProps","nextProps","prevState","includes","render","lazy","containerStyle","routes","container","pages","map","route","descriptor","key","unmountOnBlur","options","absoluteFill","renderTabBar","create","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { View, StyleSheet } from 'react-native';\r\n\r\nimport {\r\n  NavigationHelpersContext,\r\n  TabNavigationState,\r\n  useTheme,\r\n} from '@react-navigation/native';\r\n// eslint-disable-next-line import/no-unresolved\r\n\r\nimport ResourceSavingScene from './ResourceSavingScene';\r\nimport type {\r\n  BottomTabNavigationConfig,\r\n  BottomTabDescriptorMap,\r\n  BottomTabNavigationHelpers,\r\n} from '../types';\r\n\r\ntype Props = BottomTabNavigationConfig & {\r\n  state: TabNavigationState;\r\n  navigation: BottomTabNavigationHelpers;\r\n  descriptors: BottomTabDescriptorMap;\r\n};\r\n\r\ntype State = {\r\n  loaded: number[];\r\n};\r\n\r\nfunction SceneContent({\r\n  isFocused,\r\n  children,\r\n}: {\r\n  isFocused: boolean;\r\n  children: React.ReactNode;\r\n}) {\r\n  const { colors } = useTheme();\r\n\r\n  return (\r\n    <View\r\n      accessibilityElementsHidden={!isFocused}\r\n      importantForAccessibility={isFocused ? 'auto' : 'no-hide-descendants'}\r\n      style={[styles.content, { backgroundColor: colors.background }]}\r\n    >\r\n      {children}\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default class BottomTabView extends React.Component<Props, State> {\r\n  static defaultProps = {\r\n    lazy: true,\r\n  };\r\n\r\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\r\n    const { index } = nextProps.state;\r\n\r\n    return {\r\n      // Set the current tab to be loaded if it was not loaded before\r\n      loaded: prevState.loaded.includes(index)\r\n        ? prevState.loaded\r\n        : [...prevState.loaded, index],\r\n    };\r\n  }\r\n\r\n  state = {\r\n    loaded: [this.props.state.index],\r\n  };\r\n\r\n  private renderTabBar = () => {\r\n    const {\r\n      tabBar = () => <View/>,\r\n      tabBarOptions,\r\n      state,\r\n      navigation,\r\n      descriptors,\r\n    } = this.props;\r\n    return tabBar({\r\n      ...tabBarOptions,\r\n      state: state,\r\n      descriptors: descriptors,\r\n      navigation: navigation,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { state, descriptors, navigation, lazy, containerStyle } = this.props;\r\n    const { routes } = state;\r\n    const { loaded } = this.state;\r\n\r\n    return (\r\n      <NavigationHelpersContext.Provider value={navigation}>\r\n          <View style={[styles.container, containerStyle]}>\r\n            <View style={styles.pages}>\r\n              {routes.map((route, index) => {\r\n                const descriptor = descriptors[route.key];\r\n                const { unmountOnBlur } = descriptor.options;\r\n                const isFocused = state.index === index;\r\n\r\n                if (unmountOnBlur && !isFocused) {\r\n                  return null;\r\n                }\r\n\r\n                if (lazy && !loaded.includes(index) && !isFocused) {\r\n                  // Don't render a screen if we've never navigated to it\r\n                  return null;\r\n                }\r\n\r\n                return (\r\n                  <ResourceSavingScene\r\n                    key={route.key}\r\n                    style={StyleSheet.absoluteFill}\r\n                    isVisible={isFocused}\r\n                  >\r\n                    <SceneContent isFocused={isFocused}>\r\n                      {descriptor.render()}\r\n                    </SceneContent>\r\n                  </ResourceSavingScene>\r\n                );\r\n              })}\r\n            </View>\r\n            {this.renderTabBar()}\r\n          </View>\r\n      </NavigationHelpersContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    overflow: 'hidden',\r\n  },\r\n  pages: {\r\n    flex: 1,\r\n  },\r\n  content: {\r\n    flex: 1,\r\n  },\r\n});\r\n"]}