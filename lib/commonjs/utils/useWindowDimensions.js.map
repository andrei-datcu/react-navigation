{"version":3,"sources":["useWindowDimensions.tsx"],"names":["useWindowDimensions","dimensions","setDimensions","React","useState","height","width","Dimensions","get","useEffect","onChange","window","d","addEventListener"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAEA;AACA;AACe,SAASA,mBAAT,GAA+B;AAC5C,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BC,KAAK,CAACC,QAAN,CAAe,MAAM;AACvD;AACA,UAAM;AAAEC,MAAAA,MAAM,GAAG,CAAX;AAAcC,MAAAA,KAAK,GAAG;AAAtB,QAA4BC,wBAAWC,GAAX,CAAe,QAAf,CAAlC;;AAEA,WAAO;AAAEH,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAP;AACD,GALmC,CAApC;AAOAH,EAAAA,KAAK,CAACM,SAAN,CAAgB,MAAM;AACpB,UAAMC,QAAQ,GAAG,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAwC;AACvD,YAAM;AAAEL,QAAAA,KAAF;AAASD,QAAAA;AAAT,UAAoBM,MAA1B;AAEAT,MAAAA,aAAa,CAAEU,CAAD,IAAO;AACnB,YAAIN,KAAK,KAAKM,CAAC,CAACN,KAAZ,IAAqBD,MAAM,KAAKO,CAAC,CAACP,MAAtC,EAA8C;AAC5C,iBAAOO,CAAP;AACD;;AAED,eAAO;AAAEN,UAAAA,KAAF;AAASD,UAAAA;AAAT,SAAP;AACD,OANY,CAAb;AAOD,KAVD,CADoB,CAapB;AACA;;;AACAK,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,MAAM,EAAEJ,wBAAWC,GAAX,CAAe,QAAf;AAAV,KAAD,CAAR;;AAEAD,4BAAWM,gBAAX,CAA4B,QAA5B,EAAsCH,QAAtC;;AAEA,WAAO,MAAMH,wBAAWM,gBAAX,CAA4B,QAA5B,EAAsCH,QAAtC,CAAb;AACD,GApBD,EAoBG,EApBH;AAsBA,SAAOT,UAAP;AACD","sourcesContent":["import * as React from 'react';\r\nimport { ScaledSize, Dimensions } from 'react-native';\r\n\r\n// This is similar to the new useWindowDimensions hook in react-native\r\n// However, we have a custom implementation to support older RN versions\r\nexport default function useWindowDimensions() {\r\n  const [dimensions, setDimensions] = React.useState(() => {\r\n    // `height` and `width` maybe undefined during SSR, so we initialize them\r\n    const { height = 0, width = 0 } = Dimensions.get('window');\r\n\r\n    return { height, width };\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    const onChange = ({ window }: { window: ScaledSize }) => {\r\n      const { width, height } = window;\r\n\r\n      setDimensions((d) => {\r\n        if (width === d.width && height === d.height) {\r\n          return d;\r\n        }\r\n\r\n        return { width, height };\r\n      });\r\n    };\r\n\r\n    // We might have missed an update before the listener was added\r\n    // So make sure to update the dimensions\r\n    onChange({ window: Dimensions.get('window') });\r\n\r\n    Dimensions.addEventListener('change', onChange);\r\n\r\n    return () => Dimensions.addEventListener('change', onChange);\r\n  }, []);\r\n\r\n  return dimensions;\r\n}\r\n"]}