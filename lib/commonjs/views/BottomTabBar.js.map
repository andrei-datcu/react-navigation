{"version":3,"sources":["BottomTabBar.tsx"],"names":["DEFAULT_TABBAR_HEIGHT","DEFAULT_MAX_TAB_ITEM_WIDTH","useNativeDriver","Platform","OS","BottomTabBar","state","navigation","descriptors","activeBackgroundColor","activeTintColor","adaptive","allowFontScaling","inactiveBackgroundColor","inactiveTintColor","keyboardHidesTabBar","labelPosition","labelStyle","iconStyle","safeAreaInsets","showLabel","style","tabStyle","colors","buildLink","focusedRoute","routes","index","focusedDescriptor","key","focusedOptions","options","dimensions","isKeyboardShown","shouldShowTabBar","tabBarVisible","isTabBarHidden","setIsTabBarHidden","React","useState","visible","Animated","Value","useEffect","timing","toValue","duration","start","finished","layout","setLayout","height","width","handleLayout","e","nativeEvent","shouldUseHorizontalLabels","maxTabItemWidth","flattenedStyle","StyleSheet","flatten","maxWidth","length","isLandscape","defaultInsets","insets","top","right","bottom","left","styles","tabBar","backgroundColor","card","borderTopColor","border","transform","translateY","interpolate","inputRange","outputRange","position","paddingBottom","paddingHorizontal","Math","max","content","map","route","focused","onPress","event","emit","type","target","canPreventDefault","defaultPrevented","dispatch","CommonActions","navigate","name","onLongPress","label","tabBarLabel","undefined","title","accessibilityLabel","tabBarAccessibilityLabel","params","tabBarTestID","tabBarButton","tabBarIcon","create","borderTopWidth","hairlineWidth","elevation","flex","flexDirection"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n  View,\r\n  Animated,\r\n  StyleSheet,\r\n  Platform,\r\n  LayoutChangeEvent,\r\n} from 'react-native';\r\nimport {\r\n  NavigationContext,\r\n  NavigationRouteContext,\r\n  CommonActions,\r\n  useTheme,\r\n  useLinkBuilder,\r\n} from '@react-navigation/native';\r\nimport { useSafeArea } from 'react-native-safe-area-context';\r\n\r\nimport BottomTabItem from './BottomTabItem';\r\nimport useWindowDimensions from '../utils/useWindowDimensions';\r\nimport useIsKeyboardShown from '../utils/useIsKeyboardShown';\r\nimport type { BottomTabBarProps } from '../types';\r\n\r\ntype Props = BottomTabBarProps & {\r\n  activeTintColor?: string;\r\n  inactiveTintColor?: string;\r\n};\r\n\r\nconst DEFAULT_TABBAR_HEIGHT = 50;\r\nconst DEFAULT_MAX_TAB_ITEM_WIDTH = 125;\r\n\r\nconst useNativeDriver = Platform.OS !== 'web';\r\n\r\nexport default function BottomTabBar({\r\n  state,\r\n  navigation,\r\n  descriptors,\r\n  activeBackgroundColor,\r\n  activeTintColor,\r\n  adaptive = true,\r\n  allowFontScaling,\r\n  inactiveBackgroundColor,\r\n  inactiveTintColor,\r\n  keyboardHidesTabBar = false,\r\n  labelPosition,\r\n  labelStyle,\r\n  iconStyle,\r\n  safeAreaInsets,\r\n  showLabel,\r\n  style,\r\n  tabStyle,\r\n}: Props) {\r\n  const { colors } = useTheme();\r\n  const buildLink = useLinkBuilder();\r\n\r\n  const focusedRoute = state.routes[state.index];\r\n  const focusedDescriptor = descriptors[focusedRoute.key];\r\n  const focusedOptions = focusedDescriptor.options;\r\n\r\n  const dimensions = useWindowDimensions();\r\n  const isKeyboardShown = useIsKeyboardShown();\r\n\r\n  const shouldShowTabBar =\r\n    focusedOptions.tabBarVisible !== false &&\r\n    !(keyboardHidesTabBar && isKeyboardShown);\r\n\r\n  const [isTabBarHidden, setIsTabBarHidden] = React.useState(!shouldShowTabBar);\r\n\r\n  const [visible] = React.useState(\r\n    () => new Animated.Value(shouldShowTabBar ? 1 : 0)\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (shouldShowTabBar) {\r\n      Animated.timing(visible, {\r\n        toValue: 1,\r\n        duration: 250,\r\n        useNativeDriver,\r\n      }).start(({ finished }) => {\r\n        if (finished) {\r\n          setIsTabBarHidden(false);\r\n        }\r\n      });\r\n    } else {\r\n      setIsTabBarHidden(true);\r\n\r\n      Animated.timing(visible, {\r\n        toValue: 0,\r\n        duration: 200,\r\n        useNativeDriver,\r\n      }).start();\r\n    }\r\n  }, [shouldShowTabBar, visible]);\r\n\r\n  const [layout, setLayout] = React.useState({\r\n    height: 0,\r\n    width: dimensions.width,\r\n  });\r\n\r\n  const handleLayout = (e: LayoutChangeEvent) => {\r\n    const { height, width } = e.nativeEvent.layout;\r\n\r\n    setLayout((layout) => {\r\n      if (height === layout.height && width === layout.width) {\r\n        return layout;\r\n      } else {\r\n        return {\r\n          height,\r\n          width,\r\n        };\r\n      }\r\n    });\r\n  };\r\n\r\n  const { routes } = state;\r\n  const shouldUseHorizontalLabels = () => {\r\n    if (labelPosition) {\r\n      return labelPosition === 'beside-icon';\r\n    }\r\n\r\n    if (!adaptive) {\r\n      return false;\r\n    }\r\n\r\n    if (layout.width >= 768) {\r\n      // Screen size matches a tablet\r\n      let maxTabItemWidth = DEFAULT_MAX_TAB_ITEM_WIDTH;\r\n\r\n      const flattenedStyle = StyleSheet.flatten(tabStyle);\r\n\r\n      if (flattenedStyle) {\r\n        if (typeof flattenedStyle.width === 'number') {\r\n          maxTabItemWidth = flattenedStyle.width;\r\n        } else if (typeof flattenedStyle.maxWidth === 'number') {\r\n          maxTabItemWidth = flattenedStyle.maxWidth;\r\n        }\r\n      }\r\n\r\n      return routes.length * maxTabItemWidth <= layout.width;\r\n    } else {\r\n      const isLandscape = dimensions.width > dimensions.height;\r\n\r\n      return isLandscape;\r\n    }\r\n  };\r\n\r\n  const defaultInsets = useSafeArea();\r\n\r\n  const insets = {\r\n    top: safeAreaInsets?.top ?? defaultInsets.top,\r\n    right: safeAreaInsets?.right ?? defaultInsets.right,\r\n    bottom: safeAreaInsets?.bottom ?? defaultInsets.bottom,\r\n    left: safeAreaInsets?.left ?? defaultInsets.left,\r\n  };\r\n\r\n  return (\r\n    <Animated.View\r\n      style={[\r\n        styles.tabBar,\r\n        {\r\n          backgroundColor: colors.card,\r\n          borderTopColor: colors.border,\r\n        },\r\n        {\r\n          transform: [\r\n            {\r\n              translateY: visible.interpolate({\r\n                inputRange: [0, 1],\r\n                outputRange: [layout.height + insets.bottom, 0],\r\n              }),\r\n            },\r\n          ],\r\n          // Absolutely position the tab bar so that the content is below it\r\n          // This is needed to avoid gap at bottom when the tab bar is hidden\r\n          position: isTabBarHidden ? 'absolute' : null,\r\n        },\r\n        {\r\n          height: DEFAULT_TABBAR_HEIGHT + insets.bottom,\r\n          paddingBottom: insets.bottom,\r\n          paddingHorizontal: Math.max(insets.left, insets.right),\r\n        },\r\n        style,\r\n      ]}\r\n      pointerEvents={isTabBarHidden ? 'none' : 'auto'}\r\n    >\r\n      <View style={styles.content} onLayout={handleLayout}>\r\n        {routes.map((route, index) => {\r\n          const focused = index === state.index;\r\n          const { options } = descriptors[route.key];\r\n\r\n          const onPress = () => {\r\n            const event = navigation.emit({\r\n              type: 'tabPress',\r\n              target: route.key,\r\n              canPreventDefault: true,\r\n            });\r\n\r\n            if (!focused && !event.defaultPrevented) {\r\n              navigation.dispatch({\r\n                ...CommonActions.navigate(route.name),\r\n                target: state.key,\r\n              });\r\n            }\r\n          };\r\n\r\n          const onLongPress = () => {\r\n            navigation.emit({\r\n              type: 'tabLongPress',\r\n              target: route.key,\r\n            });\r\n          };\r\n\r\n          const label =\r\n            options.tabBarLabel !== undefined\r\n              ? options.tabBarLabel\r\n              : options.title !== undefined\r\n              ? options.title\r\n              : route.name;\r\n\r\n          const accessibilityLabel =\r\n            options.tabBarAccessibilityLabel !== undefined\r\n              ? options.tabBarAccessibilityLabel\r\n              : typeof label === 'string'\r\n              ? `${label}, tab, ${index + 1} of ${routes.length}`\r\n              : undefined;\r\n\r\n          return (\r\n            <NavigationContext.Provider\r\n              key={route.key}\r\n              value={descriptors[route.key].navigation}\r\n            >\r\n              <NavigationRouteContext.Provider value={route}>\r\n                <BottomTabItem\r\n                  route={route}\r\n                  focused={focused}\r\n                  horizontal={shouldUseHorizontalLabels()}\r\n                  onPress={onPress}\r\n                  onLongPress={onLongPress}\r\n                  accessibilityLabel={accessibilityLabel}\r\n                  to={buildLink(route.name, route.params)}\r\n                  testID={options.tabBarTestID}\r\n                  allowFontScaling={allowFontScaling}\r\n                  activeTintColor={activeTintColor}\r\n                  inactiveTintColor={inactiveTintColor}\r\n                  activeBackgroundColor={activeBackgroundColor}\r\n                  inactiveBackgroundColor={inactiveBackgroundColor}\r\n                  button={options.tabBarButton}\r\n                  icon={options.tabBarIcon}\r\n                  label={label}\r\n                  showLabel={showLabel}\r\n                  labelStyle={labelStyle}\r\n                  iconStyle={iconStyle}\r\n                  style={tabStyle}\r\n                />\r\n              </NavigationRouteContext.Provider>\r\n            </NavigationContext.Provider>\r\n          );\r\n        })}\r\n      </View>\r\n    </Animated.View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  tabBar: {\r\n    left: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    borderTopWidth: StyleSheet.hairlineWidth,\r\n    elevation: 8,\r\n  },\r\n  content: {\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n  },\r\n});\r\n"]}