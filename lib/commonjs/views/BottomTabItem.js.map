{"version":3,"sources":["BottomTabItem.tsx"],"names":["BottomTabBarItem","focused","route","label","icon","to","button","children","style","onPress","accessibilityRole","rest","Platform","OS","styles","e","metaKey","altKey","ctrlKey","shiftKey","preventDefault","accessibilityLabel","testID","onLongPress","horizontal","activeTintColor","customActiveTintColor","inactiveTintColor","customInactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","showLabel","allowFontScaling","labelStyle","iconStyle","colors","undefined","primary","text","mix","card","hex","renderLabel","color","labelBeside","labelBeneath","renderIcon","activeOpacity","inactiveOpacity","iconHorizontal","iconVertical","scene","backgroundColor","accessibilityStates","tab","tabLandscape","tabPortrait","StyleSheet","create","flex","alignItems","justifyContent","flexDirection","height","textAlign","fontSize","marginBottom","marginLeft","display"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n  View,\r\n  Text,\r\n  TouchableWithoutFeedback,\r\n  StyleSheet,\r\n  Platform,\r\n  StyleProp,\r\n  ViewStyle,\r\n  TextStyle,\r\n  GestureResponderEvent,\r\n} from 'react-native';\r\nimport { Link, Route, useTheme } from '@react-navigation/native';\r\nimport Color from 'color';\r\n\r\nimport TabBarIcon from './TabBarIcon';\r\nimport type { BottomTabBarButtonProps } from '../types';\r\n\r\ntype Props = {\r\n  /**\r\n   * Whether the tab is focused.\r\n   */\r\n  focused: boolean;\r\n  /**\r\n   * The route object which should be specified by the tab.\r\n   */\r\n  route: Route<string>;\r\n  /**\r\n   * The label text of the tab.\r\n   */\r\n  label:\r\n    | string\r\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\r\n  /**\r\n   * Icon to display for the tab.\r\n   */\r\n  icon?: (props: {\r\n    focused: boolean;\r\n    size: number;\r\n    color: string;\r\n  }) => React.ReactNode;\r\n  /**\r\n   * URL to use for the link to the tab.\r\n   */\r\n  to?: string;\r\n  /**\r\n   * The button for the tab. Uses a `TouchableWithoutFeedback` by default.\r\n   */\r\n  button?: (props: BottomTabBarButtonProps) => React.ReactNode;\r\n  /**\r\n   * The accessibility label for the tab.\r\n   */\r\n  accessibilityLabel?: string;\r\n  /**\r\n   * An unique ID for testing for the tab.\r\n   */\r\n  testID?: string;\r\n  /**\r\n   * Function to execute on press in React Native.\r\n   * On the web, this will use onClick.\r\n   */\r\n  onPress: (\r\n    e: React.MouseEvent<HTMLElement, MouseEvent> | GestureResponderEvent\r\n  ) => void;\r\n  /**\r\n   * Function to execute on long press.\r\n   */\r\n  onLongPress: (e: GestureResponderEvent) => void;\r\n  /**\r\n   * Whether the label should be aligned with the icon horizontally.\r\n   */\r\n  horizontal: boolean;\r\n  /**\r\n   * Color for the icon and label when the item is active.\r\n   */\r\n  activeTintColor?: string;\r\n  /**\r\n   * Color for the icon and label when the item is inactive.\r\n   */\r\n  inactiveTintColor?: string;\r\n  /**\r\n   * Background color for item when its active.\r\n   */\r\n  activeBackgroundColor?: string;\r\n  /**\r\n   * Background color for item when its inactive.\r\n   */\r\n  inactiveBackgroundColor?: string;\r\n  /**\r\n   * Whether to show the label text for the tab.\r\n   */\r\n  showLabel?: boolean;\r\n  /**\r\n   * Whether to allow scaling the font for the label for accessibility purposes.\r\n   */\r\n  allowFontScaling?: boolean;\r\n  /**\r\n   * Style object for the label element.\r\n   */\r\n  labelStyle?: StyleProp<TextStyle>;\r\n  /**\r\n   * Style object for the icon element.\r\n   */\r\n  iconStyle?: StyleProp<ViewStyle>;\r\n  /**\r\n   * Style object for the wrapper element.\r\n   */\r\n  style?: StyleProp<ViewStyle>;\r\n};\r\n\r\nexport default function BottomTabBarItem({\r\n  focused,\r\n  route,\r\n  label,\r\n  icon,\r\n  to,\r\n  button = ({\r\n    children,\r\n    style,\r\n    onPress,\r\n    to,\r\n    accessibilityRole,\r\n    ...rest\r\n  }: BottomTabBarButtonProps) => {\r\n    if (Platform.OS === 'web' && to) {\r\n      // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\r\n      // We need to use `onClick` to be able to prevent default browser handling of links.\r\n      return (\r\n        <Link\r\n          {...rest}\r\n          to={to}\r\n          style={[styles.button, style]}\r\n          onPress={(e: any) => {\r\n            if (\r\n              !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\r\n              (e.button == null || e.button === 0) // ignore everything but left clicks\r\n            ) {\r\n              e.preventDefault();\r\n              onPress?.(e);\r\n            }\r\n          }}\r\n        >\r\n          {children}\r\n        </Link>\r\n      );\r\n    } else {\r\n      return (\r\n        <TouchableWithoutFeedback\r\n          {...rest}\r\n          accessibilityRole={accessibilityRole}\r\n          onPress={onPress}\r\n        >\r\n          <View style={style}>{children}</View>\r\n        </TouchableWithoutFeedback>\r\n      );\r\n    }\r\n  },\r\n  accessibilityLabel,\r\n  testID,\r\n  onPress,\r\n  onLongPress,\r\n  horizontal,\r\n  activeTintColor: customActiveTintColor,\r\n  inactiveTintColor: customInactiveTintColor,\r\n  activeBackgroundColor = 'transparent',\r\n  inactiveBackgroundColor = 'transparent',\r\n  showLabel = true,\r\n  allowFontScaling,\r\n  labelStyle,\r\n  iconStyle,\r\n  style,\r\n}: Props) {\r\n  const { colors } = useTheme();\r\n\r\n  const activeTintColor =\r\n    customActiveTintColor === undefined\r\n      ? colors.primary\r\n      : customActiveTintColor;\r\n\r\n  const inactiveTintColor =\r\n    customInactiveTintColor === undefined\r\n      ? Color(colors.text).mix(Color(colors.card), 0.5).hex()\r\n      : customInactiveTintColor;\r\n\r\n  const renderLabel = ({ focused }: { focused: boolean }) => {\r\n    if (showLabel === false) {\r\n      return null;\r\n    }\r\n\r\n    const color = focused ? activeTintColor : inactiveTintColor;\r\n\r\n    if (typeof label === 'string') {\r\n      return (\r\n        <Text\r\n          numberOfLines={1}\r\n          style={[\r\n            styles.label,\r\n            { color },\r\n            horizontal ? styles.labelBeside : styles.labelBeneath,\r\n            labelStyle,\r\n          ]}\r\n          allowFontScaling={allowFontScaling}\r\n        >\r\n          {label}\r\n        </Text>\r\n      );\r\n    }\r\n\r\n    return label({ focused, color });\r\n  };\r\n\r\n  const renderIcon = ({ focused }: { focused: boolean }) => {\r\n    if (icon === undefined) {\r\n      return null;\r\n    }\r\n\r\n    const activeOpacity = focused ? 1 : 0;\r\n    const inactiveOpacity = focused ? 0 : 1;\r\n\r\n    return (\r\n      <TabBarIcon\r\n        route={route}\r\n        size={horizontal ? 17 : 24}\r\n        activeOpacity={activeOpacity}\r\n        inactiveOpacity={inactiveOpacity}\r\n        activeTintColor={activeTintColor}\r\n        inactiveTintColor={inactiveTintColor}\r\n        renderIcon={icon}\r\n        style={[\r\n          horizontal ? styles.iconHorizontal : styles.iconVertical,\r\n          iconStyle,\r\n        ]}\r\n      />\r\n    );\r\n  };\r\n\r\n  const scene = { route, focused };\r\n\r\n  const backgroundColor = focused\r\n    ? activeBackgroundColor\r\n    : inactiveBackgroundColor;\r\n\r\n  return button({\r\n    to,\r\n    onPress,\r\n    onLongPress,\r\n    testID,\r\n    accessibilityLabel,\r\n    accessibilityRole: 'button',\r\n    // @ts-ignore\r\n    accessibilityStates: focused ? ['selected'] : [],\r\n    style: [\r\n      styles.tab,\r\n      { backgroundColor },\r\n      horizontal ? styles.tabLandscape : styles.tabPortrait,\r\n      style,\r\n    ],\r\n    children: (\r\n      <React.Fragment>\r\n        {renderIcon(scene)}\r\n        {renderLabel(scene)}\r\n      </React.Fragment>\r\n    ),\r\n  }) as React.ReactElement;\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  tab: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n  },\r\n  tabPortrait: {\r\n    justifyContent: 'flex-end',\r\n    flexDirection: 'column',\r\n  },\r\n  tabLandscape: {\r\n    justifyContent: 'center',\r\n    flexDirection: 'row',\r\n  },\r\n  iconVertical: {\r\n    flex: 1,\r\n  },\r\n  iconHorizontal: {\r\n    height: '100%',\r\n  },\r\n  label: {\r\n    textAlign: 'center',\r\n    backgroundColor: 'transparent',\r\n  },\r\n  labelBeneath: {\r\n    fontSize: 11,\r\n    marginBottom: 1.5,\r\n  },\r\n  labelBeside: {\r\n    fontSize: 12,\r\n    marginLeft: 20,\r\n  },\r\n  button: {\r\n    display: 'flex',\r\n  },\r\n});\r\n"]}